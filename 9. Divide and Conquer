#             Experiment No.â€”9 : Divide and Conquer 

# Implement algorithms like merge sort and Strassen's Matrix Multiplication.

# Merge Sort Algorithm
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    while left and right:
        result.append(left.pop(0) if left[0] < right[0] else right.pop(0))
    return result + left + right

# Strassen's Matrix Multiplication
def strassen(A, B):
    if len(A) == 1:
        return [[A[0][0] * B[0][0]]]

    mid = len(A) // 2
    A11, A12, A21, A22 = [row[:mid] for row in A[:mid]], [row[mid:] for row in A[:mid]], [row[:mid] for row in A[mid:]], [row[mid:] for row in A[mid:]]
    B11, B12, B21, B22 = [row[:mid] for row in B[:mid]], [row[mid:] for row in B[:mid]], [row[:mid] for row in B[mid:]], [row[mid:] for row in B[mid:]]

    M1 = strassen(A11, subtract(B12, B22))
    M2 = strassen(add(A11, A12), B22)
    M3 = strassen(add(A21, A22), B11)  
    M4 = strassen(A22, subtract(B21, B11))
    M5 = strassen(add(A11, A22), add(B11, B22))
    M6 = strassen(subtract(A12, A22), add(B21, B22))
    M7 = strassen(subtract(A11, A21), add(B11, B12))

    C11 = add(subtract(add(M5, M4), M2), M6)
    C12 = add(M1, M2)
    C21 = add(M3, M4)
    C22 = add(subtract(add(M5, M1), M3), M7)
    return [C11[i] + C12[i] for i in range(len(C11))] + [C21[i] + C22[i] for i in range(len(C21))]

# Helper Functions

def add(A, B): return [[A[i][j] + B[i][j] for j in range(len(A[0]))] for i in range(len(A))]
def subtract(A, B): return [[A[i][j] - B[i][j] for j in range(len(A[0]))] for i in range(len(A))]

# Example usage:
arr = [38, 27, 43, 3, 9, 82, 10]
print("Sorted Array:", merge_sort(arr))

A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]
print("Strassen's Matrix Multiplication Result:", strassen(A, B))

