#            Experiment No.â€”2 : List-Based Stack Operations 

#     Create a list-based stack and perform stack operations. 

class Stack:
    def __init__(self):
        self.stack = []

    def push(self, element):
        self.stack.append(element)

    def pop(self):
        return self.stack.pop() if self.stack else None
    
    def peek(self):
        return self.stack[-1] if self.stack else None

    def is_empty(self):
        return len(self.stack) == 0

    def size(self):
        return len(self.stack)
    
    # Example usage:

Stack = Stack()
Stack.push(10)
Stack.push(20)
Stack.push(30)

print("Top item:", Stack.peek())
print("Popped item:", Stack.pop())
print("Stack size:", Stack.size())
print("Is stack empty:", Stack.is_empty())
